// Mocks generated by Mockito 5.4.4 from annotations
// in counter_app/test/pages/counter/counter_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:counter_app/domain/number_formatter.dart' as _i3;
import 'package:counter_app/page/counter/counter_presenter.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CounterPresenter].
///
/// See the documentation for Mockito's code generation for more information.
class MockCounterPresenter extends _i1.Mock implements _i2.CounterPresenter {
  @override
  List<_i3.NumberFormatter> get formatters => (super.noSuchMethod(
        Invocation.getter(#formatters),
        returnValue: <_i3.NumberFormatter>[],
        returnValueForMissingStub: <_i3.NumberFormatter>[],
      ) as List<_i3.NumberFormatter>);

  @override
  String get counter => (super.noSuchMethod(
        Invocation.getter(#counter),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#counter),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#counter),
        ),
      ) as String);

  @override
  _i3.NumberFormatter get selectedFormatter => (super.noSuchMethod(
        Invocation.getter(#selectedFormatter),
        returnValue: _i4.dummyValue<_i3.NumberFormatter>(
          this,
          Invocation.getter(#selectedFormatter),
        ),
        returnValueForMissingStub: _i4.dummyValue<_i3.NumberFormatter>(
          this,
          Invocation.getter(#selectedFormatter),
        ),
      ) as _i3.NumberFormatter);

  @override
  void incrementCounter() => super.noSuchMethod(
        Invocation.method(
          #incrementCounter,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void decrementCounter() => super.noSuchMethod(
        Invocation.method(
          #decrementCounter,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> resetCounter() => (super.noSuchMethod(
        Invocation.method(
          #resetCounter,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChangeNumberFormatter(_i3.NumberFormatter? formatter) =>
      super.noSuchMethod(
        Invocation.method(
          #onChangeNumberFormatter,
          [formatter],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ThousandsSeparatedFormatter].
///
/// See the documentation for Mockito's code generation for more information.
class MockThousandsSeparatedFormatter extends _i1.Mock
    implements _i3.ThousandsSeparatedFormatter {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  String format(int? number) => (super.noSuchMethod(
        Invocation.method(
          #format,
          [number],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #format,
            [number],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #format,
            [number],
          ),
        ),
      ) as String);
}
